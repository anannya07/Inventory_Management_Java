# 🛒 **Inventory Management System in Core Java** 📦

This project demonstrates the practical application of **fundamental Core Java concepts** through an **Inventory Management Solution**. The implementation leverages Java's **object-oriented programming paradigm**, showcasing best practices in class hierarchy design, exception handling, collections, file I/O, and more. Below is a detailed explanation of how the key Java concepts are applied to build this robust and maintainable system.

## 🚀 **Project Overview**

This **Inventory Management System** demonstrates the use of Java's powerful features in a practical, real-world context. It manages products, handles exceptions, performs efficient data storage, and ensures user-friendly interaction through a console-based interface. Key concepts explored include:

- **Object-Oriented Programming (OOP)** 🏗️
- **Exception Handling** 🛠️
- **Collections Framework** 🧑‍💻
- **File I/O and Serialization** 💾
- **Java Date/Time API** 📅
- **Input Validation** ✅

## 🔑 **Key Features**

### 1. **Object-Oriented Design** 🏗️
The system follows an object-oriented approach with a **well-structured class hierarchy**. The `Product` class demonstrates **proper encapsulation** using private fields and public getters/setters to control access to data. Additionally, the `Serializable` interface is implemented to allow **persistent storage** of product data.

### 2. **Custom Exception Handling** 🚨
A custom exception class, **`InventoryException`**, is used to create domain-specific exceptions. This ensures that meaningful error messages are provided to the user instead of relying on generic Java exceptions, thus improving **readability** and **maintainability** of the code.

```java
public class InventoryException extends Exception {
    public InventoryException(String message) {
        super(message);
    }
}
